name: SCA + Lint + JaCoCo + Unit Test

on:
  push:
    branches:
      - main

env:
  IMAGE_NAME: coincalculator
  IMAGE_TAG: latest

jobs:
  push-checks:
    name: Code checks
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      
      - name: Setup JDK
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'
      
      - name: Run Lint (Spotless)
        run: mvn spotless:check

      - name: Run SCA (Sonatype)
        run: mvn org.sonatype.ossindex.maven:ossindex-maven-plugin:audit

      - name: Run Unit Tests + JaCoCo (Code Coverage)
        run: mvn clean verify

      - name: Upload JaCoCo Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: JaCoCo-report
          path: target/site/jacoco

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USER }}/$IMAGE_NAME:$IMAGE_TAG .

      - name: Push Docker image
        run: |
          docker push ${{ secrets.DOCKER_USER }}/$IMAGE_NAME:$IMAGE_TAG

      - name: Deploy to DigitalOcean Droplet
        uses: appleboy/ssh-action@v1.2.2
        env:
          IMAGE_NAME: "coincalculator"
          IMAGE_TAG: "latest"
        with:
          host: ${{ secrets.DO_HOST }}
          username: root
          key: ${{ secrets.DO_SSH }}
          envs: IMAGE_NAME, IMAGE_TAG
          script: |
            # Pull the latest image
            docker pull ${{ secrets.DOCKER_USER }}/$IMAGE_NAME:$IMAGE_TAG
              
            # Stop and remove existing container if running
            if [ "$(docker ps -f "name=$IMAGE_NAME" --format "{{.Status}}")" ]; then
              docker stop $IMAGE_NAME
              docker rm $IMAGE_NAME
            fi
              
            # Run the new container with environment variables
            docker run -d --name $IMAGE_NAME -p 8080:8080 ${{ secrets.DOCKER_USER }}/$IMAGE_NAME:$IMAGE_TAG
